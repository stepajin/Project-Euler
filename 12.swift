// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:
//
//   1: 1
//   3: 1,3
//   6: 1,2,3,6
//  10: 1,2,5,10
//  15: 1,3,5,15
//  21: 1,3,7,21
//  28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

func primeFactors(of n: Int) -> [Int] {
	guard n > 0 else { return [] }
    guard n > 3 else { return [n] }
    var factors: [Int] = []
    var div = n
    for i in 2...n/2 {
        while div % i == 0 { 
            factors += [Int(i)]
            div /= i
        }
        if div == 1 {
            break
        }
    }
    return factors.isEmpty ? [n] : factors
}

func poweredPrimeFactors(of n: Int) -> [Int: Int] {
    let factors = primeFactors(of: n)
    return [Int: [Int]](grouping: factors, by: { $0 }).mapValues { $0.count }
}

func numberOfDivisors(of n: Int) -> Int {
    poweredPrimeFactors(of: n).values.lazy.map { $0 + 1 }.reduce(1, *)
}

func numberOfDivisors(triangleOf n: Int) -> Int {
    guard n > 1 else { return 1 }
    guard n > 2 else { return 2 }
    return n % 2 == 0 
        ? numberOfDivisors(of: n/2) * numberOfDivisors(of: n+1)
        : numberOfDivisors(of: n) * numberOfDivisors(of: (n+1)/2)
}

func triangleNumber(of n: Int) -> Int {
    n * (n + 1) / 2
}

let n = (1...Int.max).first { numberOfDivisors(triangleOf: $0) >= 500 }!
let result = triangleNumber(of: n)
print(result)
