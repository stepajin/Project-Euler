// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

func pentagonal(_ n: Int) -> Int {
    n * (3 * n - 1) / 2
}

func isInteger(_ d: Double) -> Bool {
    d == Double(Int(d))
}

func index(_ x: Int) -> Int? {
    // 3n^2 - n - 2x = 0
    let disc = Double(1 + 24 * x)
    let sqrt = disc.squareRoot()
    let n = (1.0 + sqrt) / 6.0
    guard isInteger(n) else { return nil }
    return Int(n)
}

func isPentagonal(_ x: Int) -> Bool {
    index(x) != nil
}

let ps = (1...1000000).map { pentagonal($0) }

var result = Int.max
for k in (2...ps.count-1) {
    let pk = ps[k]
    for j in stride(from: k-1, through: 1, by: -1) {
        let pj = ps[j]
        let diff = pk - pj
        guard diff < result else { break }
        let sum = pk + pj
        if isPentagonal(diff) && isPentagonal(sum) {
            result = diff
        }
    }
}

print(result)
