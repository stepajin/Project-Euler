// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
// Triangle 	  	Tn=n(n+1)/2         1, 3, 6, 10, 15, ...
// Pentagonal 	  	Pn=n(3n−1)/2        1, 5, 12, 22, 35, ...
// Hexagonal 	  	Hn=n(2n−1)          1, 6, 15, 28, 45, ...

// It can be verified that T_285 = P_165 = H_143 = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.

func isInteger(_ d: Double) -> Bool {
    d == Double(Int(d))
}

func quadraticRoot(a: Int, b: Int, c: Int) -> Int? {
    let disc = Double(b * b - 4 * a * c)
    let sqrt = disc.squareRoot()
    let n = ((-1 * Double(b)) + sqrt) / (2 * Double(a))
    guard isInteger(n) else { return nil }
    return Int(n)
}

func pentagonalIndex(_ x: Int) -> Int? {
    quadraticRoot(a: 3, b: -1, c: -2 * x)
}

func isPentagonal(_ x: Int) -> Bool {
    pentagonalIndex(x) != nil
}

func hexagonalIndex(_ x: Int) -> Int? {
    quadraticRoot(a: 2, b: -1, c: -x)
}

func isHexagonal(_ x: Int) -> Bool {
    hexagonalIndex(x) != nil
}

func triangleNumber(_ n: Int) -> Int {
    n * (n + 1) / 2
}

let result = stride(from: 286, through: Int.max, by: 1)
    .lazy
    .map { triangleNumber($0) }
    .first { isPentagonal($0) && isHexagonal($0) }
    
print(result!)
