// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

//  2^2=4, 2^3=8, 2^4=16, 2^5=32
//  3^2=9, 3^3=27, 3^4=81, 3^5=243
//  4^2=16, 4^3=64, 4^4=256, 4^5=1024
//  5^2=25, 5^3=125, 5^4=625, 5^5=3125

// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

struct Power: Equatable, Hashable, CustomDebugStringConvertible { 
    let n: Int
    let exp: Int
    var debugDescription: String { "\(n)^\(exp)" }
}

let aRange = (2...100)
let bRange = (2...100)

var powersPerBase: [[Power]] = aRange.map { a -> [Power] in
    bRange.map { Power(n: a, exp: $0) }
}

for a in aRange {
    let aIndex = a - aRange.lowerBound
    guard powersPerBase[aIndex][0].n == a else { continue }
    var power = a * a
    var exp = 2
    while power <= aRange.upperBound {
        let bIndex = power - aRange.lowerBound
        powersPerBase[bIndex] = powersPerBase[bIndex].map { Power(n: a, exp: $0.exp * exp) }
        power *= a
        exp += 1
    }
}

let result = Set(powersPerBase.flatMap { $0 }).count
print(result)

